"use client";
import React, { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";
import { API_URL, plantApi } from "@/lib/api";
import { toast } from "sonner";
import { Loader2, Droplet, Sprout } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { requestNotificationPermission } from "@/lib/notification";

const AddReminderPage = () => {
  const router = useRouter();
  const params = useParams();
  const plantId = params.id;

  console.log("[DEBUG] plantId", plantId, "length:", plantId.length);

  const [reminderData, setReminderData] = useState({
    type: "",
    frequency: "",
    scheduledDate: "",
    scheduledTime: "",
    dayOfWeek: "",
    timeOfDay: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const [plantName, setPlantName] = useState("");
  const [loadingPlant, setLoadingPlant] = useState(true);

  function isValidObjectId(id) {
    return typeof id === "string" && id.length === 24 && /^[a-fA-F0-9]{24}$/.test(id);
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setReminderData((prevData) => ({ ...prevData, [name]: value }));
  };

  const handleDateChange = (e) => {
    setReminderData((prevData) => ({ ...prevData, scheduledTime: e.target.value }));
  };

  const handleTimeChange = (e) => {
    setReminderData((prevData) => ({ ...prevData, timeOfDay: e.target.value }));
  };

  const generateNotificationContent = (type, frequency, plantName) => {
    let title = '';
    let body = '';

    switch (type) {
        case 'watering':
            title = `ü™¥ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏î‡∏ô‡πâ‡∏≥ ${plantName} ‡πÅ‡∏•‡πâ‡∏ß!`;
            body = frequency === 'once'
                ? '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß'
                : frequency === 'daily'
                ? '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
                : '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß';
            break;
        case 'fertilizing':
            title = `üå± ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢ ${plantName} ‡πÅ‡∏•‡πâ‡∏ß!`;
            body = frequency === 'once'
                ? '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
                : frequency === 'daily'
                ? '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
                : '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß';
            break;
        default:
            title = `üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${plantName}`;
            body = '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡πÅ‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß';
    }
    return { title, body };
  };

  useEffect(() => {
    const fetchPlant = async () => {
      if (!plantId || !isValidObjectId(plantId)) {
        setError("Plant ID is missing or invalid.");
        setLoadingPlant(false);
        return;
      }
      try {
        setLoadingPlant(true);
        const data = await plantApi.getPlant(plantId);
        if (data && data.name) {
          setPlantName(data.name);
        } else {
          setError("Could not fetch plant data.");
        }
      } catch (err) {
        console.error("Error fetching plant:", err);
        setError("Failed to load plant data.");
      } finally {
        setLoadingPlant(false);
      }
    };

    fetchPlant();
  }, [plantId]); // Rerun effect if plantId changes

  // Add function to get today's date in YYYY-MM-DD format
  const getTodayDate = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  // Add function to validate date and time
  const validateDateTime = (date, time) => {
    const selectedDateTime = new Date(`${date}T${time}`);
    const now = new Date();
    
    // If selected date is today, check if time is in the future
    if (date === getTodayDate()) {
      return selectedDateTime > now;
    }
    
    // For future dates, just check if date is valid
    return selectedDateTime > now;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    // Add date validation
    if (reminderData.frequency === "once") {
      if (!validateDateTime(reminderData.scheduledDate, reminderData.scheduledTime)) {
        toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
        setIsSubmitting(false);
        return;
      }
    }

    // Ensure notification permission and FCM token
    try {
      await requestNotificationPermission();
    } catch (err) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
      setIsSubmitting(false);
      return;
    }

    if (!isValidObjectId(plantId)) {
      setError("plantId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ObjectID 24 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)");
      setIsSubmitting(false);
      return;
    }
    if (!reminderData.type || !reminderData.frequency) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
      setIsSubmitting(false);
      return;
    }
    if (
      reminderData.frequency === "once" &&
      (!reminderData.scheduledDate || !reminderData.scheduledTime)
    ) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß");
      setIsSubmitting(false);
      return;
    }
    if (
      (reminderData.frequency === "daily" || reminderData.frequency === "weekly") &&
      !reminderData.timeOfDay
    ) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå");
      setIsSubmitting(false);
      return;
    }
    if (reminderData.frequency === "weekly" && !reminderData.dayOfWeek) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå");
      setIsSubmitting(false);
      return;
    }

    try {
      const token = localStorage.getItem("token");
      if (!token) {
        router.push("/login");
        return;
      }
      const { title, body } = generateNotificationContent(reminderData.type, reminderData.frequency, plantName);

      const notificationData = {
          reminderId: "", // This will be populated by backend after saving
          plantId: plantId,
          type: reminderData.type,
          frequency: reminderData.frequency,
          plantName: plantName,
          title: title,
          body: body,
      };

      const reminderPayload = {
        plantId: plantId,
        type: reminderData.type,
        frequency: reminderData.frequency,
        scheduledTime:
          reminderData.frequency === "once"
            ? new Date(`${reminderData.scheduledDate}T${reminderData.scheduledTime}`).toISOString()
            : undefined,
        dayOfWeek:
          reminderData.frequency === "weekly" ? reminderData.dayOfWeek : undefined,
        timeOfDay:
          reminderData.frequency === "daily" || reminderData.frequency === "weekly"
            ? reminderData.timeOfDay
            : undefined,
        notificationData: JSON.stringify(notificationData), // Add notification data as a JSON string
      };
      Object.keys(reminderPayload).forEach(
        (key) => reminderPayload[key] === undefined && delete reminderPayload[key]
      );
      console.log("[DEBUG] reminderPayload", reminderPayload);
      const res = await fetch(`${API_URL}/api/reminders/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        credentials: "include",
        body: JSON.stringify(reminderPayload),
      });
      let data = null;
      try {
        data = await res.json();
      } catch (e) {
        data = { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô response ‡∏à‡∏≤‡∏Å backend ‡πÑ‡∏î‡πâ" };
      }
      if (!res.ok) {
        console.error("[DEBUG] Backend error:", data);
        setError(data.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
        setIsSubmitting(false);
        return;
      }
      toast.success("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      router.push(`/reminder/detail/${plantId}`);
    } catch (err) {
      setError(err.message);
      toast.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container mx-auto p-6 bg-[#E6E4BB] min-h-screen">
      <h1 className="text-2xl font-bold text-center text-[#373E11]">
        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡∏ä
      </h1>
      <form onSubmit={handleSubmit} className="max-w-lg mx-auto mt-8 space-y-6 p-6 rounded-lg border border-[#373E11]">
        {error && <p className="text-red-500 text-center">{error}</p>}
        <div>
          <label className="block text-lg font-semibold mb-2">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</label>
          <div className="grid">
            <label className="inline-flex items-center border p-2 mb-3 rounded-lg hover:bg-[#373E11] hover:text-[#E6E4BB] transition duration-300 ease-in-out">
              <input
                type="radio"
                name="type"
                value="watering"
                checked={reminderData.type === "watering"}
                onChange={handleInputChange}
                className="form-radio text-[#373E11]"
                required
              />
              <div className="flex ml-3 gap-1 items-center">
                <Droplet size={20} color="#00b0eb" />
                <span>‡∏£‡∏î‡∏ô‡πâ‡∏≥</span>
              </div>
            </label>
            <label className="inline-flex items-center border p-2 mb-3 rounded-lg hover:bg-[#373E11] hover:text-[#E6E4BB] transition duration-300 ease-in-out">
              <input
                type="radio"
                name="type"
                value="fertilizing"
                checked={reminderData.type === "fertilizing"}
                onChange={handleInputChange}
                className="form-radio text-[#373E11]"
                required
              />
              <div className="flex ml-3 items-center">
                <Sprout size={22} color="#018923" />
                <span className="ml-2">‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢</span>
              </div>
            </label>
          </div>
        </div>
        <div>
          <label className="block text-lg font-semibold mb-2">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà:</label>
          <Select
            name="frequency"
            value={reminderData.frequency}
            onValueChange={(value) =>
              handleInputChange({ target: { name: "frequency", value } })
            }
            required
          >
            <SelectTrigger className="w-full mt-1 pl-3 py-2 text-base border-[#373E11] focus:outline-none focus:ring-[#373E11] focus:border-[#373E11] sm:text-sm rounded-md">
              <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà" />
            </SelectTrigger>
            <SelectContent>
              <SelectGroup>
                <SelectItem value="once">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß</SelectItem>
                <SelectItem value="daily">‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô</SelectItem>
                <SelectItem value="weekly">‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</SelectItem>
              </SelectGroup>
            </SelectContent>
          </Select>
        </div>
        {reminderData.frequency === "once" && (
          <div>
            <label className="block text-lg font-semibold mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</label>
            <input
              type="date"
              name="scheduledDate"
              value={reminderData.scheduledDate}
              onChange={handleInputChange}
              min={getTodayDate()}
              className="mt-1 block w-full pl-3 pr-3 py-2 text-base border focus:outline-none focus:ring-[#373E11] focus:border-[#373E11] sm:text-sm rounded-md"
              required
            />
            <label className="block text-lg font-semibold my-2">‡πÄ‡∏ß‡∏•‡∏≤:</label>
            <input
              type="time"
              name="scheduledTime"
              value={reminderData.scheduledTime}
              onChange={handleInputChange}
              className="mt-1 block w-full pl-3 pr-3 py-2 text-base border focus:outline-none focus:ring-[#373E11] focus:border-[#373E11] sm:text-sm rounded-md"
              required
            />
            {reminderData.scheduledDate === getTodayDate() && (
              <p className="text-sm text-gray-600 mt-1">
                ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
              </p>
            )}
          </div>
        )}
        {reminderData.frequency === "weekly" && (
          <div>
            <label className="block text-lg font-semibold mb-2">‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå:</label>
            <Select
              name="dayOfWeek"
              value={reminderData.dayOfWeek}
              onValueChange={(value) =>
                handleInputChange({ target: { name: "dayOfWeek", value } })
              }
              required
            >
              <SelectTrigger className="w-full mt-1 pl-3 py-2 text-base border-[#373E11] focus:outline-none focus:ring-[#373E11] focus:border-[#373E11] sm:text-sm rounded-md">
                <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô" />
              </SelectTrigger>
              <SelectContent>
                <SelectGroup>
                  <SelectItem value="Sunday">‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå</SelectItem>
                  <SelectItem value="Monday">‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå</SelectItem>
                  <SelectItem value="Tuesday">‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£</SelectItem>
                  <SelectItem value="Wednesday">‡∏û‡∏∏‡∏ò</SelectItem>
                  <SelectItem value="Thursday">‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ</SelectItem>
                  <SelectItem value="Friday">‡∏®‡∏∏‡∏Å‡∏£‡πå</SelectItem>
                  <SelectItem value="Saturday">‡πÄ‡∏™‡∏≤‡∏£‡πå</SelectItem>
                </SelectGroup>
              </SelectContent>
            </Select>
          </div>
        )}
        {(reminderData.frequency === "daily" || reminderData.frequency === "weekly") && (
          <div>
            <label className="block text-lg font-semibold mb-2">‡πÄ‡∏ß‡∏•‡∏≤:</label>
            <input
              type="time"
              name="timeOfDay"
              value={reminderData.timeOfDay}
              onChange={handleTimeChange}
              className="mt-1 block w-full pl-3 pr-3 py-2 text-base border border-[#373E11] focus:outline-none focus:ring-[#373E11] focus:border-[#373E11] sm:text-sm rounded-md"
              required
            />
          </div>
        )}
        <button
          type="submit"
          className="w-full bg-[#373E11] text-[#E6E4BB] p-3 rounded-md font-medium hover:bg-[#454b28] transition-colors flex items-center justify-center"
          disabled={isSubmitting || loadingPlant || !plantName}
        >
          {isSubmitting ? (
            <Loader2 className="mr-2 h-5 w-5 animate-spin" />
          ) : (
            <Droplet className="mr-2 h-5 w-5" />
          )}
          {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤..." : "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"}
        </button>
      </form>
    </div>
  );
};

export default AddReminderPage; 